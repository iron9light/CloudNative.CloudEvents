# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - master
    - rel/v*
  paths:
    exclude:
    - '**/*.md'

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core 3.x'
  inputs:
    packageType: sdk
    version: 3.x

- script: dotnet tool install --tool-path . nbgv
  displayName: 'Install NBGV tool'

- script: nbgv cloud
  displayName: Set Version

- script: dotnet tool install --tool-path . dotnet-sonarscanner
  displayName: 'Install SonarScanner tool'

- script: dotnet-sonarscanner begin /k:"iron9light_CloudNative.CloudEvents" /o:"iron9light-github" /v:"$(Build.BuildNumber)" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="$(sonar.token)" /d:sonar.cs.opencover.reportsPaths="$(Build.SourcesDirectory)/**/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="$(Agent.TempDirectory)/*.trx" /d:sonar.pullrequest.key=$(System.PullRequest.PullRequestNumber) /d:sonar.pullrequest.branch="$(System.PullRequest.SourceBranch)" /d:sonar.pullrequest.base="$(System.PullRequest.TargetBranch)" /d:sonar.pullrequest.github.repository="iron9light/CloudNative.CloudEvents"
  displayName: 'SonarScanner begin (PR)'
  condition: variables['System.PullRequest.SourceBranch']

- script: dotnet-sonarscanner begin /k:"iron9light_CloudNative.CloudEvents" /o:"iron9light-github" /v:"$(Build.BuildNumber)" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="$(sonar.token)" /d:sonar.cs.opencover.reportsPaths="$(Build.SourcesDirectory)/**/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="$(Agent.TempDirectory)/*.trx"
  displayName: 'SonarScanner begin'
  condition: not(variables['System.PullRequest.SourceBranch'])

- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test $(buildConfiguration)'
  inputs:
    command: test
    projects: '**/*.sln'
    arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat="\"opencover,cobertura\"" /p:Exclude="[xunit.*]*"'

- script: dotnet-sonarscanner end /d:sonar.login="$(sonar.token)"
  displayName: 'SonarScanner end'

- task: DotNetCoreCLI@2
  displayName: Pack
  inputs:
    command: pack
    packagesToPack: '**/*.csproj'
    configuration: $(BuildConfiguration)
    packDirectory: $(Build.ArtifactStagingDirectory)\artifacts
    nobuild: true
    verbosityPack: Minimal

- task: PublishBuildArtifacts@1
  displayName: Publish Package Artifacts
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)\artifacts
    artifactType: container
    artifactName: Packages

- task: PublishCodeCoverageResults@1
  displayName: Publish Coverage
  inputs:
    codeCoverageTool: cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/**/coverage.cobertura.xml
